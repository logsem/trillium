(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/aneris_lang/lib/nodup_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib Require Import set_code.
From aneris.aneris_lang.lib Require Import map_code.
From aneris.aneris_lang.lib Require Import network_util_code.

Definition receivefrom_nodup : val :=
  位: "rcvlog" "skt",
  letrec: "loop" <> :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    (if: set_mem "msg" "rcvlog"
     then  "loop" #()
     else  ("msg", set_add "msg" "rcvlog")) in
    "loop" #().

Definition receivefrom_nodup_n : val :=
  rec: "receivefrom_nodup_n" "skt" "msgs" "n" :=
  (if: "n" = #0
   then  ([], "msgs")
   else
     let: "tmp" := receivefrom_nodup "msgs" "skt" in
     let: "m" := Fst "tmp" in
     let: "msgs'" := Snd "tmp" in
     let: "tailmsgs" := "receivefrom_nodup_n" "skt" "msgs'" ("n" - #1) in
     let: "ms" := Fst "tailmsgs" in
     let: "msgs''" := Snd "tailmsgs" in
     ("m" :: "ms", "msgs''")).

Definition nodup_empty := set_empty.

Definition nodup_init : val :=
  位: <>,
  let: "log" := ref (nodup_empty #()) in
  位: "skt",
  let: "tmp" := receivefrom_nodup ! "log" "skt" in
  let: "msg" := Fst "tmp" in
  let: "log'" := Snd "tmp" in
  "log" <- "log'";;
  "msg".

Definition receivefrom_nodup_set : val :=
  位: "skt" "rcv" "addrs",
  let: "msgs" := ref (map_empty #()) in
  letrec: "loop" <> :=
    (if: set_equal (map_dom ! "msgs") "addrs"
     then  ! "msgs"
     else
       let: "msg" := "rcv" "skt" in
       "msgs" <- (map_insert (Snd "msg") (Fst "msg") ! "msgs");;
       "loop" #()) in
    "loop" #().
