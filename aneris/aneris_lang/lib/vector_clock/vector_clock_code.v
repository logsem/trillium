(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/aneris_lang/lib/vector_clock/vector_clock_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import network_util_code.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.

Definition vect_make : val :=
  rec: "vect_make" "len" "init" :=
  (if: "len" = #0
   then  []
   else  "init" :: "vect_make" ("len" - #1) "init").

Definition vect_nth : val := λ: "vec" "i", unSOME (list_nth "vec" "i").

Definition vect_update : val :=
  rec: "vect_update" "vec" "i" "v" :=
  match: "vec" with
    SOME "a" =>
    (if: "i" = #0
     then  "v" :: list_tail "vec"
     else  Fst "a" :: "vect_update" (Snd "a") ("i" - #1) "v")
  | NONE => []
  end.

Definition vect_inc : val :=
  λ: "vec" "i",
  let: "v" := (vect_nth "vec" "i") + #1 in
  vect_update "vec" "i" "v".

Definition vect_leq : val :=
  rec: "vect_leq" "v1" "v2" :=
  match: "v1" with
    SOME "a1" =>
    match: "v2" with
      SOME "a2" =>
      ((Fst "a1") ≤ (Fst "a2")) && ("vect_leq" (Snd "a1") (Snd "a2"))
    | NONE => #false
    end
  | NONE => list_is_empty "v2"
  end.

Definition vect_conc : val :=
  λ: "v1" "v2", (~ (vect_leq "v1" "v2")) && (~ (vect_leq "v2" "v1")).

Definition vect_applicable : val :=
  λ: "v1" "v2" "i",
  letrec: "vect_applicable_aux" "j" "v1" "v2" :=
    match: "v1" with
      SOME "a1" =>
      match: "v2" with
        SOME "a2" =>
        ((if: ("j" = "i")
          then  ((Fst "a1") = ((Fst "a2") + #1))
          else  ((Fst "a1") ≤ (Fst "a2")))) && ("vect_applicable_aux" 
                                                  ("j" + #1) (Snd "a1")
                                                  (Snd "a2"))
      | NONE => #false
      end
    | NONE => list_is_empty "v2"
    end in
    "vect_applicable_aux" #0 "v1" "v2".

Definition vect_serialize : val :=
  rec: "vect_serialize" "v" :=
  match: "v" with
    SOME "a" => (i2s (Fst "a")) ^^ (#"_" ^^ ("vect_serialize" (Snd "a")))
  | NONE => #""
  end.

Definition vect_deserialize : val :=
  rec: "vect_deserialize" "s" :=
  match: FindFrom "s" #0 #"_" with
    SOME "i" =>
    let: "x" := unSOME (s2i (Substring "s" #0 "i")) in
    let: "tail" := let: "length" := strlen "s" in
                   let: "start" := "i" + #1 in
                   "vect_deserialize" (Substring "s" "start" ("length" - "start")) in
    "x" :: "tail"
  | NONE => []
  end.

Definition vect_serializer :=
  {|
      s_ser := vect_serialize;
      s_deser := vect_deserialize;
  |}.
