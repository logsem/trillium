(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/aneris_lang/lib/network_util_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib Require Import set_code.

Definition unSOME : val :=
  λ: "o", match: "o" with
    NONE => assert: #false
  | SOME "x" => "x"
  end.

Definition sendto_all : val :=
  λ: "skt" "ns" "msg",
  list_iter (λ: "n", SendTo "skt" "msg" "n";;
                      #()) "ns".

Definition listen : val :=
  rec: "listen" "skt" "handler" :=
  match: ReceiveFrom "skt" with
    SOME "m" =>
    let: "msg" := Fst "m" in
    let: "sender" := Snd "m" in
    "handler" "msg" "sender"
  | NONE => "listen" "skt" "handler"
  end.

Definition wait_receivefrom : val :=
  λ: "skt" "test",
  letrec: "loop" <> :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    (if: "test" "msg"
     then  "msg"
     else  "loop" #()) in
    "loop" #().

Definition wait_receivefresh : val :=
  λ: "skt" "ms", wait_receivefrom "skt" (λ: "m", ~ (list_mem "m" "ms")).

Definition sendto_all_set : val :=
  λ: "skt" "x" "msg",
  set_iter (λ: "n", let: "_l" := SendTo "skt" "msg" "n" in
                     #()) "x".

Definition receivefrom_all : val :=
  λ: "skt" "nodes",
  letrec: "recv" "n" :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    let: "sender" := Snd "msg" in
    (if: "sender" = "n"
     then  Fst "msg"
     else  "recv" "n") in
    list_fold (λ: "acc" "n", list_append "acc" [("recv" "n")]) [] "nodes".

Definition wait_receivefrom_all : val :=
  λ: "skt" "nodes" "test",
  letrec: "recv" "n" :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    let: "sender" := Snd "msg" in
    let: "m" := Fst "msg" in
    (if: ("sender" = "n") && ("test" "m")
     then  "m"
     else  "recv" "n") in
    list_fold (λ: "acc" "n", list_append "acc" [("recv" "n")]) [] "nodes".

Definition tag_of_message : val :=
  λ: "msg",
  match: FindFrom "msg" #0 #"_" with
    SOME "i" => Substring "msg" #0 "i"
  | NONE => #"UNDEFINED"
  end.

Definition value_of_message : val :=
  λ: "msg",
  match: FindFrom "msg" #0 #"_" with
    SOME "i" =>
    let: "length" := strlen "msg" in
    let: "start" := "i" + #1 in
    Substring "msg" "start" ("length" - "start")
  | NONE => #"UNDEFINED"
  end.
