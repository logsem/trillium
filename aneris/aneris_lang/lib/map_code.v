(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/aneris_lang/lib/map_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib Require Import set_code.

Definition map_empty : val := λ: <>, [].

Definition map_remove : val :=
  λ: "key", rec: "loop" "m" :=
  match: "m" with
    NONE => NONE
  | SOME "p" =>
      (if: (Fst (Fst "p")) = "key"
       then  Snd "p"
       else  Fst "p" :: "loop" (Snd "p"))
  end.

Definition map_insert : val :=
  λ: "key" "value" "m", ("key", "value") :: map_remove "key" "m".

Definition map_lookup : val :=
  λ: "key", rec: "loop" "m" :=
  match: "m" with
    NONE => NONE
  | SOME "p" =>
      (if: (Fst (Fst "p")) = "key"
       then  SOME (Snd (Fst "p"))
       else  "loop" (Snd "p"))
  end.

Definition map_mem : val :=
  λ: "k" "m",
  match: map_lookup "k" "m" with
    NONE => #false
  | SOME "_p" => #true
  end.

Definition map_dom : val :=
  rec: "map_dom" "m" :=
  match: "m" with
    NONE => set_empty #()
  | SOME "p" => set_add (Fst (Fst "p")) ("map_dom" (Snd "p"))
  end.

Definition map_iter : val :=
  rec: "map_iter" "f" "m" :=
  match: "m" with
    NONE => #()
  | SOME "p" =>
      let: "entry" := Fst "p" in
      "f" (Fst "entry") (Snd "entry");;
      "map_iter" "f" (Snd "p")
  end.

Definition map_forall : val :=
  rec: "map_forall" "f" "m" :=
  match: "m" with
    NONE => #true
  | SOME "p" =>
      let: "entry" := Fst "p" in
      let: "t" := Snd "p" in
      ("f" (Fst "entry") (Snd "entry")) && ("map_forall" "f" "t")
  end.
